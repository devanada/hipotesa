// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  RETURNED
}

enum Roles {
  admin
  user
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Account {
  id                  String  @id @default(cuid())
  userId              String  @map("user_id")
  type                String
  provider            String
  providerAccountId   String  @map("provider_account_id")
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String    @id @default(cuid())
  sessionToken  String    @unique @map("session_token")
  userId        String    @map("user_id")
  expires       DateTime
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Roles     @default(user)
  address       String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  cart          Cart[]
  transaction   Transaction[]
  order         Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Product {
  id          String    @id @default(cuid())
  category_id Int
  name        String
  description String
  price       String
  image       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  category    Category? @relation(fields: [category_id], references: [id])
  cart_item    CartItem[]
  order_item   OrderItem[]

  @@map("products")
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  products Product[]

  @@map("categories")
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user        User    @relation(fields: [user_id], references: [id])
  cart_items   CartItem[]
  transaction Transaction[]

  @@map("carts")
}

model CartItem {
  id         Int  @id @default(autoincrement())
  cart_id    Int
  product_id String
  quantity   Int
  cart    Cart    @relation(fields: [cart_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("cart_item")
}

model Transaction {
  id          String    @id @default(cuid())
  user_id     String
  cart_id     Int
  amount      String
  status      TransactionStatus
  payment_url String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id])
  cart        Cart      @relation(fields: [cart_id], references: [id])
  order       Order?

  @@map("transactions")
}

model Order {
  id              String        @id @default(cuid())
  user_id         String
  transaction_id  String        @unique
  total           String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  items           OrderItem[]
  status          OrderStatus
  user            User?         @relation(fields: [user_id], references: [id])
  transaction     Transaction?  @relation(fields: [transaction_id], references: [id])

  @@map("orders")
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order_id    String
  product_id  String
  quantity    Int
  price       String
  order       Order   @relation(fields: [order_id], references: [id])
  product     Product @relation(fields: [product_id], references: [id])

  @@map("order_item")
}
