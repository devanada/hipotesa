// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier    String
  token         String   @unique
  expires       DateTime

  @@unique([identifier, token])
}

model Post {
  id            String    @id @default(cuid())
  title         String
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  categoryId    Int
  user          User      @relation(fields: [userId], references: [id])
  category      Category? @relation(fields: [categoryId], references: [id])
  comments      Comment[]
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  description   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
}

model Comment {
  id            Int       @id @default(autoincrement())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  postId        String
  userId        String
  post          Post      @relation(fields: [postId], references: [id])
  user          User?     @relation(fields: [userId], references: [id])
}